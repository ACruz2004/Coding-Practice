// bigint Test Program
//
// Tests:  int constructor, uses ==
// 
// NEED TO IMPLEMENT
//
#include <iostream> 
#include <cassert>
#include "bigint.hpp"


//===========================================================================
int main () {
    {

        // VERY INCOMPLETE set of tests.


        //------------------------------------------------------
        // Setup fixture
        bigint left(0);
        bigint right(0);
        bigint result;

        // Test 
        result = left + right;

        // Verify
        assert(left   == 0);
        assert(right  == 0);
        assert(result == 0);
    }

    {
      //------------------------------------------------------
      // Setup fixture
      bigint left(1);
      bigint right(0);
      bigint result;

      // Test
      result = left + right;

      // Verify
      assert(left   == 1);
      assert(right  == 0);
      assert(result == 1);
    }
    {
      //------------------------------------------------------
      // Setup fixture
      bigint left(1);
      bigint right(1);
      bigint result;

      // Test
      result = left + right;

      // Verify
      assert(left   == 1);
      assert(right  == 1);
      assert(result == 2);
    }

    
    //Add test cases as needed.
    //Added by me
  {

    bigint left(1000);
    bigint right(1000);
    bigint result;

    result = left + right;

    assert(left == 1000);
    assert(right == 1000);
    assert(result == 2000);

    std::cout << "The sum of " << left << " + " << right << " = " << result << std::endl;

  }

  {
    
    bigint left("100000000");
    bigint right("100000000");
    bigint result;

    result = left + right;

    assert(left == "100000000");
    assert(right == "100000000");
    assert(result == "200000000");


    std::cout << "The sum of " << left << " + " << right << " = " << result << std::endl;
  }

  {
    
    bigint left("322429750998008720498572034578098610865048657108945710451045710984571084651094569786189762894761986139874659035875380965237639569874526");
    bigint right("30498572098475023511215908751097301734903718570125895097863591865198653791827561849563895736513975134591836518945761937485198374568193476513894891475618957651459187456189645197845");
    bigint result;

    result = left + right;

    assert(left == "322429750998008720498572034578098610865048657108945710451045710984571084651094569786189762894761986139874659035875380965237639569874526");
    assert(right == "30498572098475023511215908751097301734903718570125895097863591865198653791827561849563895736513975134591836518945761937485198374568193476513894891475618957651459187456189645197845");
    assert(result == "30498572098475023511215908751097301734903718892555646095872312363770688369926172714612552845459685585637547503516846588579768160757956371275881031350277993526840152693829215072371");


  }

  {
    
    bigint left("2045073280452309457203984572304795109874518904574901387510395783050415739048709138745913045781398507450917509374198739405713904857139045710958175490175430957193571934579134759137591374953174590139845797591905817390475983759173984571837548173957819754710397509175918473195");
    bigint right("2045073280452309457203984572304795109874518904574901387510395783050415739048709138745913045781398507450917509374198739405713904857139045710958175490175430957193571934579134759137591374953174590139845797591905817390475983759173984571837548173957819754710397509175918473195");
    bigint result;

    result = left + right;

    assert(left == "2045073280452309457203984572304795109874518904574901387510395783050415739048709138745913045781398507450917509374198739405713904857139045710958175490175430957193571934579134759137591374953174590139845797591905817390475983759173984571837548173957819754710397509175918473195");
    assert(right == "2045073280452309457203984572304795109874518904574901387510395783050415739048709138745913045781398507450917509374198739405713904857139045710958175490175430957193571934579134759137591374953174590139845797591905817390475983759173984571837548173957819754710397509175918473195");
    assert(result == "4090146560904618914407969144609590219749037809149802775020791566100831478097418277491826091562797014901835018748397478811427809714278091421916350980350861914387143869158269518275182749906349180279691595183811634780951967518347969143675096347915639509420795018351836946390");



  }

  {
    
    bigint left("409137450917509134759081643157104750145701983745019375091759189347501375103457138057409157097509173094571345710350193587109571390457319583751034751930485793187095719847519304751903457139058734910173945730195713595");
    bigint right("278904572039867209367489267290687234676703267203430896710961097461097610976101670967109571075419057109857109857819759175190845613958457759364984571987519346145813976108970197510975419084759667591710947597490679184");
    bigint result;

    result = left + right;

    assert(left == "409137450917509134759081643157104750145701983745019375091759189347501375103457138057409157097509173094571345710350193587109571390457319583751034751930485793187095719847519304751903457139058734910173945730195713595");
    assert(right == "278904572039867209367489267290687234676703267203430896710961097461097610976101670967109571075419057109857109857819759175190845613958457759364984571987519346145813976108970197510975419084759667591710947597490679184");
    assert(result == "688042022957376344126570910447791984822405250948450271802720286808598986079558809024518728172928230204428455568169952762300417004415777343116019323918005139332909695956489502262878876223818402501884893327686392779");


  }

  {
    
    bigint left("99999999999999999");
    bigint right("99999999999999999");
    bigint result;

    result = left + right;

    assert(left == "99999999999999999");
    assert(right == "99999999999999999");
    assert(result == "199999999999999998");

    std::cout << "The sum of " << left << " + " << right << " = " << result << std::endl;

  }

  {
    
    bigint left("1234567891011121314151617181920");
    bigint right("2019181716151413121110987654321");
    bigint result;

    result = left + right;

    assert(left == "1234567891011121314151617181920");
    assert(right == "2019181716151413121110987654321");
    assert(result == "3253749607162534435262604836241");

    std::cout << "The sum of " << left << " + " << right << " = " << result << std::endl;

  }

  {
    
    bigint left(250);
    bigint right(250);
    bigint result;

    result = left + right;

    assert(left == 250);
    assert(right == 250);
    assert(result == 500);

    std::cout << "The sum of " << left << " + " << right << " = " << result << std::endl;

  }

  {
    
    bigint left("1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111");
    bigint right("1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111");
    bigint result;

    result = left + right;

    assert(left == "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111");
    assert(right == "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111");
    assert(result == "2222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222");

   
  }

  {
    
    bigint left("1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111");
    bigint right(1);
    bigint result;

    result = left + right;

    assert(left == "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111");
    assert(right == 1);
    assert(result == "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111112");


  }

  {
    
    bigint left(11111);
    bigint right(11111);
    bigint result;

    result = left + right;

    assert(left == 11111);
    assert(right == 11111);
    assert(result == 22222);

    std::cout << "The sum of " << left << " + " << right << " = " << result << std::endl;

  }

  {
    
    bigint left(23894);
    bigint right(23498);
    bigint result;

    result = left + right;

    assert(left == 23894);
    assert(right == 23498);
    assert(result == 47392);

    std::cout << "The sum of " << left << " + " << right << " = " << result << std::endl;

  }

  
    
    std::cout << "Done with testing addition." << std::endl;
    return 0;
}

